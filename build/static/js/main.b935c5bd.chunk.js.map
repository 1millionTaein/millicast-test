{"version":3,"sources":["helper/ApiHelper.js","helper/LiveApi.js","components/UserCount.js","components/LiveCast.js","components/Subscribe.js","App.js","reportWebVitals.js","index.js"],"names":["MILLICAST_API","url","options","base","axios","create","Object","assign","baseURL","auth","Authorization","instance","interceptors","request","use","config","headers","error","Promise","reject","response","setInterceptors","createWithAuth","streamName","ws_cnt","view","userCountURL","receivedHandshakeResponse","invocationId","preFix","accountId","startUserCount","acct","name","viewTarget","streamId","console","log","WebSocket","onmessage","evt","trace","handleHandshakeResponse","data","subscribeStreamCount","parseSignalRMessage","err","type","target","arguments","count","innerHTML","length","Error","entries","result","onopen","_evt","sendSignalRMessage","JSON","stringify","protocol","version","ws","subscribeRequest","toString","streamIds","messageStr","handshakeResponse","endsWith","slice","parse","send","jwt","LiveCast","videoRef","useRef","connect","a","pc","RTCPeerConnection","rtcpMuxPolicy","bundlePolicy","navigator","mediaDevices","getUserMedia","video","audio","stream","current","srcObject","getTracks","forEach","track","addTrack","createOffer","offerToReceiveAudio","offerToReceiveVideo","desc","setLocalDescription","then","sdp","codec","payload","transId","Math","random","addEventListener","msg","answer","RTCSessionDescription","setRemoteDescription","d","catch","e","document","querySelector","init","post","responseJwt","urls","useEffect","PlayerContainer","Player","ref","autoPlay","muted","className","styled","div","Subscribe","iceServers","ontrack","event","vidWin","streams","controls","addTransceiver","MediaStream","direction","streamAccountId","unauthorizedSubscribe","App","exact","path","component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.b935c5bd.chunk.js","sourcesContent":["import axios from \"axios\";\n\nconst MILLICAST_API = \"https://director.millicast.com/api\";\nconst TOKEN =\n  \"fb287fe7ccd14cc439eecf9d5aa7d6c4d71b79aeb3d8354d66c92caeaae9744e\";\n\nfunction create(url, options) {\n  const instance = axios.create(Object.assign({ baseURL: url }, options));\n  return instance;\n}\n\nfunction createWithAuth(url, Authorization, options) {\n  const instance = axios.create(Object.assign({ baseURL: url }, options));\n  setInterceptors(instance, Authorization);\n  return instance;\n}\n\nexport function setInterceptors(instance, Authorization) {\n  // Add a request interceptor\n  instance.interceptors.request.use(\n    function (config) {\n      // Do something before request is sent\n      config.headers.Authorization = `Bearer ${Authorization}`;\n      return config;\n    },\n    function (error) {\n      // Do something with request error\n      return Promise.reject(error);\n    }\n  );\n\n  // Add a response interceptor\n  instance.interceptors.response.use(\n    function (response) {\n      // Any status code that lie within the range of 2xx cause this function to trigger\n      // Do something with response data\n      return response;\n    },\n    function (error) {\n      // Any status codes that falls outside the range of 2xx cause this function to trigger\n      // Do something with response error\n      return Promise.reject(error);\n    }\n  );\n}\n\nexport const base = create(MILLICAST_API);\nexport const auth = createWithAuth(MILLICAST_API, TOKEN);\n","import { auth, base } from \"./ApiHelper\";\n\nconst streamName = \"krmxvbmm\";\nconst accountId = \"CEANfN\";\n\nexport function publishCall() {\n  return auth.post(\"/director/publish\", { streamName });\n}\n\nexport function subscribeCall() {\n  return base.post(\"/director/subscribe\", {\n    streamName,\n    streamAccountId: accountId,\n    unauthorizedSubscribe: true,\n  });\n}\n","// User Count data\nconst userCountURL = \"wss://streamevents.millicast.com/ws\";\nconst recordSeparator = \"\\x1E\";\nlet receivedHandshakeResponse = false; //connection flag for user count.\nlet invocationId = 0; //unique id for usercount calls.\nlet ws_cnt; //User count websocket\n\nlet preFix = \"viewing: \";\nlet viewCount = preFix + \"00\";\nlet view; //optional DOM element to display count.\n\nconst streamName = \"krmxvbmm\";\nconst accountId = \"CEANfN\";\n\n// User Count\nexport function startUserCount(\n  acct = accountId,\n  name = streamName,\n  viewTarget\n) {\n  if (!!ws_cnt || !acct || !name) return;\n  view = viewTarget;\n\n  const streamId = `${acct}/${name}`; //id for usercount.\n\n  console.log(\"*cnt* connect\", userCountURL);\n  ws_cnt = new WebSocket(userCountURL);\n  ws_cnt.onmessage = (evt) => {\n    if (!receivedHandshakeResponse) {\n      console.trace(\"Received handshake response\");\n      receivedHandshakeResponse = true;\n      handleHandshakeResponse(evt.data);\n\n      console.log(\"Invoking method to watch view count\");\n      subscribeStreamCount(ws_cnt, streamId);\n      return;\n    }\n\n    let response;\n    try {\n      response = parseSignalRMessage(evt.data);\n    } catch (err) {\n      console.error(\"Failed to parse JSON:\", evt.data);\n      throw err;\n    }\n    switch (response.type) {\n      case 1:\n        // invocation request\n        if (response.target === \"SubscribeViewerCountResponse\") {\n          for (const { streamId, count } of response.arguments) {\n            if (!streamId) {\n              continue;\n            }\n            console.log(`Viewer count changed. ${streamId} = ${count}`);\n            if (!!view)\n              view.innerHTML =\n                preFix + (count.length > 1 ? count : \"0\" + count);\n          }\n        }\n        break;\n      case 3:\n        // invocation response\n        if (response.error) {\n          console.error(\n            \"Failed to invoke SubscribeViewerCount method\",\n            response.error\n          );\n          throw new Error(response.error);\n        }\n        for (const [streamId, count] of Object.entries(\n          response.result[\"streamIdCounts\"]\n        )) {\n          if (!streamId) {\n            continue;\n          }\n          console.log(`Initial viewer count of ${streamId} = ${count}`);\n        }\n        break;\n      case 6:\n        // ping message, common ignore\n        break;\n    }\n  };\n\n  ws_cnt.onopen = (_evt) => {\n    console.trace(\"Websocket opened, beginning handshake\");\n    const handshakeRequest = {\n      protocol: \"json\",\n      version: 1,\n    };\n    sendSignalRMessage(ws_cnt, JSON.stringify(handshakeRequest));\n  };\n}\n\nexport function subscribeStreamCount(ws, streamId) {\n  const subscribeRequest = {\n    arguments: [[streamId]],\n    // look for invocationId on response\n    invocationId: (invocationId++).toString(),\n    streamIds: [], // signalr streamIds, not millicast\n    target: \"SubscribeViewerCount\",\n    type: 1,\n  };\n  sendSignalRMessage(ws, JSON.stringify(subscribeRequest));\n}\n\nfunction handleHandshakeResponse(messageStr) {\n  const handshakeResponse = parseSignalRMessage(messageStr);\n  if (handshakeResponse.error) {\n    console.error(handshakeResponse.error);\n    throw new Error(handshakeResponse.error);\n  }\n}\n\nfunction parseSignalRMessage(messageStr) {\n  if (messageStr.endsWith(recordSeparator)) {\n    messageStr = messageStr.slice(0, -1);\n  }\n  return JSON.parse(messageStr);\n}\n\nfunction sendSignalRMessage(ws, messageStr) {\n  if (!messageStr.endsWith(recordSeparator)) {\n    messageStr += recordSeparator;\n  }\n  console.log(\"sendSignalRMessage \", messageStr);\n  ws.send(messageStr);\n}\n\nfunction stopUserCount() {\n  ws_cnt.close();\n  ws_cnt = null;\n}\n","import React, { useEffect, useRef } from \"react\";\nimport styled from \"styled-components\";\nimport { publishCall } from \"../helper/LiveApi\";\nimport { startUserCount } from \"./UserCount\";\n\nlet url;\nlet jwt;\nlet iceServers;\nconst streamName = \"krmxvbmm\";\nconst accountId = \"CEANfN\";\n\nconst LiveCast = () => {\n  const videoRef = useRef();\n\n  const connect = async () => {\n    const config = {\n      // iceServers: iceServers,\n      rtcpMuxPolicy: \"require\",\n      bundlePolicy: \"max-bundle\",\n    };\n\n    // RTC객체 생성 및 스트림 생성\n    const pc = new RTCPeerConnection(config);\n    const stream = await navigator.mediaDevices.getUserMedia({\n      video: true,\n      audio: true,\n    });\n    videoRef.current.srcObject = stream;\n\n    console.log(stream);\n\n    // 피어커넥션 등록\n    stream.getTracks().forEach((track) => {\n      console.log(\"track: \", track);\n      // if (track.kind === \"audio\") {\n      pc.addTrack(track, stream);\n      // }\n    });\n\n    console.log(videoRef.current.srcObject);\n\n    const ws = new WebSocket(`${url}?token=${jwt}`);\n    console.log(ws);\n    ws.onopen = async function () {\n      const desc = await pc.createOffer({\n        offerToReceiveAudio: true,\n        offerToReceiveVideo: true,\n      });\n      console.log(\"createOffer Success!\");\n      pc.setLocalDescription(desc).then(() => {\n        console.log(\"setLocalDescription Success!\");\n        let data = {\n          name: \"krmxvbmm\",\n          sdp: desc.sdp,\n          codec: \"h264\",\n        };\n\n        let payload = {\n          type: \"cmd\",\n          transId: Math.random() * 10000,\n          name: \"publish\",\n          data,\n        };\n\n        ws.send(JSON.stringify(payload));\n      });\n    };\n\n    ws.addEventListener(\"message\", (evt) => {\n      console.log(\"ws::message\", evt);\n      let msg = JSON.parse(evt.data);\n      switch (msg.type) {\n        //Handle counter response coming from the Media Server.\n        case \"response\":\n          console.log(msg);\n\n          let data = msg.data;\n          let answer = new RTCSessionDescription({\n            type: \"answer\",\n            sdp: data.sdp + \"a=x-google-flag:conference\\r\\n\",\n          });\n          pc.setRemoteDescription(answer)\n            .then((d) => {\n              console.log(\"setRemoteDescription Success! \");\n              console.log(\"YOU ARE BROADCASTING!\");\n            })\n            .catch((e) => {\n              console.log(\"setRemoteDescription failed: \", e);\n            });\n          break;\n      }\n    });\n    const countEle = document.querySelector(\".count\");\n    startUserCount(accountId, streamName, countEle);\n  };\n\n  const init = async () => {\n    const { data } = await publishCall();\n    const { jwt: responseJwt, urls } = data.data;\n\n    jwt = responseJwt;\n    url = urls?.[0];\n    await connect();\n  };\n\n  useEffect(() => {\n    init();\n  }, []);\n\n  return (\n    <PlayerContainer>\n      <Player ref={videoRef} autoPlay muted />\n      <div className=\"count\"></div>\n    </PlayerContainer>\n  );\n};\n\nexport default LiveCast;\n\nconst PlayerContainer = styled.div`\n  width: 100%;\n  height: 600px;\n`;\n\nconst Player = styled.video`\n  width: 600px;\n  height: 400px;\n`;\n","import React, { useEffect, useRef } from \"react\";\nimport { subscribeCall } from \"../helper/LiveApi\";\n\nlet url;\nlet jwt;\nlet iceServers;\n\nconst Subscribe = () => {\n  const videoRef = useRef();\n\n  const connect = async () => {\n    const config = {\n      iceServers: iceServers,\n      rtcpMuxPolicy: \"require\",\n      bundlePolicy: \"max-bundle\",\n    };\n\n    // RTC객체 생성 및 스트림 생성\n    const pc = new RTCPeerConnection(config);\n\n    pc.ontrack = function (event) {\n      //Play it\n      console.log(event);\n      const vidWin = videoRef?.current;\n      if (vidWin) {\n        vidWin.srcObject = event.streams[0];\n        vidWin.controls = false;\n      }\n    };\n    const ws = new WebSocket(`${url}?token=${jwt}`);\n    ws.onopen = async function () {\n      if (pc.addTransceiver) {\n        const stream = new MediaStream();\n        pc.addTransceiver(\"audio\", {\n          direction: \"recvonly\",\n          streams: [stream],\n        });\n        pc.addTransceiver(\"video\", {\n          direction: \"recvonly\",\n          streams: [stream],\n        });\n      }\n\n      const desc = await pc.createOffer({\n        offerToReceiveAudio: true,\n        offerToReceiveVideo: true,\n      });\n\n      console.log(\"createOffer Success!\");\n      pc.setLocalDescription(desc).then(() => {\n        console.log(\"setLocalDescription Success!\");\n        let data = {\n          streamId: \"CEANfN/krmxvbmm\",\n          sdp: desc.sdp,\n        };\n\n        let payload = {\n          type: \"cmd\",\n          transId: 0,\n          name: \"view\",\n          data,\n        };\n\n        ws.send(JSON.stringify(payload));\n      });\n    };\n    ws.addEventListener(\"message\", (event) => {\n      let msg = JSON.parse(event.data);\n      console.log(msg);\n      switch (msg.type) {\n        //Handle counter response coming from the Media Server.\n        case \"response\":\n          let data = msg.data;\n          let answer = new RTCSessionDescription({\n            type: \"answer\",\n            sdp: data.sdp + \"a=x-google-flag:conference\\r\\n\",\n          });\n          pc.setRemoteDescription(answer);\n          break;\n        default:\n          return;\n      }\n    });\n  };\n\n  const init = async () => {\n    const { data } = await subscribeCall();\n    console.log(data);\n    const { jwt: responseJwt, urls } = data.data;\n\n    jwt = responseJwt;\n    url = urls?.[0];\n    await connect();\n  };\n\n  useEffect(() => {\n    init();\n  }, []);\n\n  return (\n    <div>\n      <video ref={videoRef} autoPlay />\n    </div>\n  );\n};\n\nexport default Subscribe;\n","import \"./App.css\";\nimport LiveCast from \"./components/LiveCast\";\nimport { Switch, BrowserRouter, Route } from \"react-router-dom\";\nimport Subscribe from \"./components/Subscribe\";\n\nfunction App() {\n  return (\n    <BrowserRouter>\n      <div className=\"App\">\n        <Switch>\n          <Route exact path=\"/\" component={LiveCast} />\n          <Route path=\"/subscribe\" component={Subscribe} />\n        </Switch>\n      </div>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}